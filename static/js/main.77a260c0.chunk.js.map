{"version":3,"sources":["serviceWorker.js","services/champions.js","pages/ChampionPage/index.js","component/Champion/index.js","component/Detail/index.js","pages/ChampionsPage/index.js","Routes.js","index.js"],"names":["Boolean","window","location","hostname","match","baseUrl","ChampionServices","fetchAll","a","fetch","then","response","json","fetchOne","name","ChampionPage","useState","champion","setChampion","skin","setSkin","useEffect","params","champions","data","skinId","skins","fetchChampion","isClick","setClick","handleImgClick","className","to","lore","map","i","onClick","key","src","num","alt","Champion","showDetail","index","setChampions","Detail","isShow","selectChampion","handleDetailClose","classnames","active","blurb","id","ChampionsPage","setIsShow","setSelectChampion","Object","values","fetchChampions","handleButtonClick","championId","currentChampion","Routes","exact","path","component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.77a260c0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const baseUrl = \"https://ddragon.leagueoflegends.com/cdn/10.9.1/data/en_US\";\n\nconst fetchAll = async () => {\n  return await fetch(`${baseUrl}/champion.json`).then((response) => {\n    return response.json();\n  });\n};\n\nconst fetchOne = async (name) => {\n  return await fetch(`${baseUrl}/champion/${name}.json`).then((response) => {\n    return response.json();\n  });\n};\n\nconst ChampionServices = {\n  fetchAll,\n  fetchOne,\n};\n\nexport default ChampionServices;\n","import React, { useEffect, useState } from \"react\";\nimport ChampionServices from \"../../services/champions\";\nimport \"./index.css\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ChampionPage({ match }) {\n  const [champion, setChampion] = useState({});\n  const [skin, setSkin] = useState([]);\n  const imgBaseUrl =\n    \"https://ddragon.leagueoflegends.com/cdn/img/champion/splash\";\n  useEffect(() => {\n    const fetchChampion = async () => {\n      const champions = await ChampionServices.fetchOne(match.params.name);\n      setChampion(champions.data[match.params.name]);\n      const skinId = champions.data[match.params.name].skins;\n      setSkin(skinId);\n    };\n    fetchChampion();\n  }, []);\n\n  const [isClick, setClick] = useState(false);\n  const handleImgClick = () => {\n    setClick(!isClick);\n  };\n\n  return (\n    <div className=\"champion-detail\">\n      <Link to={\"/\"}>\n        <h2>League of Legends</h2>\n      </Link>\n      <h2>{champion.name}</h2>\n      <p>{champion.lore}</p>\n      <div className=\"img-container\">\n        {champion &&\n          skin &&\n          skin.map((skins, i) => (\n            <img\n              onClick={handleImgClick}\n              className={`${isClick ? \"active\" : \"\"}`}\n              key={i}\n              src={imgBaseUrl + `/${champion.name}_${skins.num}.jpg`}\n              alt=\"\"\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport ChampionServices from \"../../services/champions\";\nimport { Link } from \"react-router-dom\";\nimport \"./index.css\";\n\nexport default function Champion({ name, showDetail, index }) {\n  const [champions, setChampions] = useState({});\n\n  useEffect(() => {\n    const fetchChampion = async () => {\n      const response = await ChampionServices.fetchOne(name);\n      setChampions(response.data[name]);\n    };\n    fetchChampion();\n  }, []);\n\n  const imgBaseUrl =\n    \"https://ddragon.leagueoflegends.com/cdn/img/champion/splash\";\n\n  return (\n    <div>\n      <div className=\"champion-info-container\">\n        <Link to={`/${name}`}>\n          {champions && name && (\n            <div>\n              <h3>{name}</h3>\n              <p>{champions.lore}</p>\n              <img src={imgBaseUrl + `/${name}_0.jpg`} alt=\"\" />\n            </div>\n          )}\n        </Link>\n        <button onClick={() => showDetail(index)}>More</button>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./index.css\";\nimport classnames from \"classnames\";\n\nexport default function Detail({ isShow, selectChampion, handleDetailClose }) {\n  const imgBaseUrl =\n    \"https://ddragon.leagueoflegends.com/cdn/img/champion/splash\";\n  return (\n    <div>\n      {selectChampion && (\n        <div className={classnames(\"detail\", { active: isShow })}>\n          <h2>{selectChampion.name} </h2>\n          <p>{selectChampion.blurb}</p>\n\n          <img src={imgBaseUrl + `/${selectChampion.id}_0.jpg`} alt=\"\" />\n\n          <button onClick={handleDetailClose}>X</button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport ChampionServices from \"../../services/champions\";\nimport Champion from \"../../component/Champion\";\nimport Detail from \"../../component/Detail/index\";\nimport \"./index.css\";\n\nfunction ChampionsPage() {\n  const [champions, setChampions] = useState([]);\n  const [isShow, setIsShow] = useState(false);\n  const [selectChampion, setSelectChampion] = useState({ id: \"Aatrox\" });\n\n  useEffect(() => {\n    const fetchChampions = async () => {\n      const response = await ChampionServices.fetchAll();\n      const champion = Object.values(response.data);\n      setChampions(champion);\n    };\n    fetchChampions();\n  }, []);\n  const handleButtonClick = (championId) => {\n    setIsShow(!isShow);\n    const currentChampion = champions[championId];\n    setSelectChampion(currentChampion);\n  };\n  const handleDetailClose = () => {\n    setIsShow(!isShow);\n  };\n  return (\n    <div className=\"App\">\n      <h1>League of Legends</h1>\n      <Detail\n        isShow={isShow}\n        handleDetailClose={handleDetailClose}\n        selectChampion={selectChampion}\n      />\n      <div className=\"champions-container\">\n        {champions &&\n          champions.map((champion, i) => (\n            <div key={champion.name}>\n              <Champion\n                key={champion.name}\n                name={champion.id}\n                showDetail={handleButtonClick}\n                index={i}\n              />\n            </div>\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default ChampionsPage;\n","import React from \"react\";\nimport ChampionPage from \"./pages/ChampionPage\";\nimport ChampionsPage from \"./pages/ChampionsPage\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nconst Routes = () => {\n  return (\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={ChampionsPage} />\n        <Route exact path=\"/:name\" component={ChampionPage} />\n      </div>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport Routes from \"./Routes\";\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}